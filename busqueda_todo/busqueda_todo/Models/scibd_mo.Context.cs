//------------------------------------------------------------------------------
// <auto-generated>
//    Este código se generó a partir de una plantilla.
//
//    Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//    Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace busqueda_todo.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class SCIBDEntities : DbContext
    {
        public SCIBDEntities()
            : base("name=SCIBDEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<AccionPorProblema> AccionPorProblema { get; set; }
        public DbSet<ArchivoAccion> ArchivoAccion { get; set; }
        public DbSet<ArchivoAdjunto> ArchivoAdjunto { get; set; }
        public DbSet<ArchivoCausa> ArchivoCausa { get; set; }
        public DbSet<Calendario> Calendario { get; set; }
        public DbSet<CalendarioDetalle> CalendarioDetalle { get; set; }
        public DbSet<Cargo> Cargo { get; set; }
        public DbSet<Categoria> Categoria { get; set; }
        public DbSet<CategoriaPorCliente> CategoriaPorCliente { get; set; }
        public DbSet<CausaPorProblema> CausaPorProblema { get; set; }
        public DbSet<Cliente> Cliente { get; set; }
        public DbSet<DetalleGrupoEmpresa> DetalleGrupoEmpresa { get; set; }
        public DbSet<DetalleValija> DetalleValija { get; set; }
        public DbSet<Email> Email { get; set; }
        public DbSet<FormatoPorCliente> FormatoPorCliente { get; set; }
        public DbSet<Frecuencia> Frecuencia { get; set; }
        public DbSet<GrupoEmpresa> GrupoEmpresa { get; set; }
        public DbSet<Impacto> Impacto { get; set; }
        public DbSet<Mensaje> Mensaje { get; set; }
        public DbSet<Prioridad> Prioridad { get; set; }
        public DbSet<PrioridadPorSubcategoria> PrioridadPorSubcategoria { get; set; }
        public DbSet<Problema> Problema { get; set; }
        public DbSet<RecursoPorProblema> RecursoPorProblema { get; set; }
        public DbSet<Servicio> Servicio { get; set; }
        public DbSet<ServicioPorCliente> ServicioPorCliente { get; set; }
        public DbSet<ServicioPorProblema> ServicioPorProblema { get; set; }
        public DbSet<Solicitud> Solicitud { get; set; }
        public DbSet<Subcategoria> Subcategoria { get; set; }
        public DbSet<sysdiagrams> sysdiagrams { get; set; }
        public DbSet<Ticket> Ticket { get; set; }
        public DbSet<TicketArchivoAdjunto> TicketArchivoAdjunto { get; set; }
        public DbSet<Transferencia> Transferencia { get; set; }
        public DbSet<Usuario> Usuario { get; set; }
        public DbSet<Valija> Valija { get; set; }
        public DbSet<webpages_Membership> webpages_Membership { get; set; }
        public DbSet<webpages_OAuthMembership> webpages_OAuthMembership { get; set; }
        public DbSet<webpages_Roles> webpages_Roles { get; set; }
        public DbSet<webpages_UsersInRoles> webpages_UsersInRoles { get; set; }
        public DbSet<VwCalendario> VwCalendario { get; set; }
        public DbSet<VwExportacionInc> VwExportacionInc { get; set; }
        public DbSet<VwExportacionSol> VwExportacionSol { get; set; }
        public DbSet<VwIncidencias> VwIncidencias { get; set; }
        public DbSet<VwProblemas> VwProblemas { get; set; }
        public DbSet<VwRptValija> VwRptValija { get; set; }
        public DbSet<VwSolicitudes> VwSolicitudes { get; set; }
        public DbSet<VwValija> VwValija { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SpMinutosTranscurridos(Nullable<System.DateTime> fechaInicial, Nullable<System.DateTime> fechaFinal, Nullable<decimal> minutosPausados)
        {
            var fechaInicialParameter = fechaInicial.HasValue ?
                new ObjectParameter("FechaInicial", fechaInicial) :
                new ObjectParameter("FechaInicial", typeof(System.DateTime));
    
            var fechaFinalParameter = fechaFinal.HasValue ?
                new ObjectParameter("FechaFinal", fechaFinal) :
                new ObjectParameter("FechaFinal", typeof(System.DateTime));
    
            var minutosPausadosParameter = minutosPausados.HasValue ?
                new ObjectParameter("MinutosPausados", minutosPausados) :
                new ObjectParameter("MinutosPausados", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SpMinutosTranscurridos", fechaInicialParameter, fechaFinalParameter, minutosPausadosParameter);
        }
    }
}
